{"componentChunkName":"component---src-templates-docs-js","path":"/nodejs/streams","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Gitbook Boilerplate","docsLocation":"https://github.com/abish7643/Project-Documentation-Gatsby/tree/master/content"}},"mdx":{"fields":{"id":"85b0ac14-5323-5e9c-92bd-40afbcd74775","title":"Streams and Buffer","slug":"/nodejs/streams"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Streams and Buffer\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Streams and Buffer\"), mdx(\"p\", null, \"Streams are used to get very large data in a progressive way so that the\\nserver doesn't need to wait till the whole data is brought. So Reading as Chunks of Data. Basically it's just like streaming a video.\"), mdx(\"p\", null, \"Read & Write Stream\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const readStream = fs.createReadStream('./docs/long-data.txt', {\\n  encoding: 'utf8',\\n});\\n//Make Enoding to Utf-8 in readStream to avoid toString Method\\n\\nconst writeStream = fs.createWriteStream('./docs/write-stream.txt');\\n\")), mdx(\"p\", null, \"Reading Chunk of Data and Writing to another file\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"readStream.on('data', chunk => {\\n  console.log('---------Chunk---------');\\n  console.log(chunk);\\n\\n  writeStream.write('--------Chunk--------');\\n  writeStream.write(chunk);\\n});\\n\")), mdx(\"p\", null, \"This Whole Process of Reading Chunks and Writing the Same to another file can be implemented using pipes, which simplifies the above code\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"readStream = pipe(writeStream);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#streams-and-buffer","title":"Streams and Buffer"}]},"parent":{"__typename":"File","relativePath":"nodejs/streams.md"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/nodejs/streams","title":"Streams and Buffer"}}},{"node":{"fields":{"slug":"/nodejs/modules","title":"Inbuilt Modules"}}},{"node":{"fields":{"slug":"/nodejs/http server","title":"Create Server Using HTTP"}}},{"node":{"fields":{"slug":"/express","title":"Express JS"}}},{"node":{"fields":{"slug":"/nodejs/importingtojs","title":"Importing From Other JS Files"}}},{"node":{"fields":{"slug":"/nodejs/global object","title":"Global Object"}}},{"node":{"fields":{"slug":"/","title":"Introduction"}}},{"node":{"fields":{"slug":"/express/2-ejs-express","title":"Using EJS"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/express/3-otherroutes","title":"Routes"}}},{"node":{"fields":{"slug":"/nodejs","title":"Node JS"}}},{"node":{"fields":{"slug":"/express/1-introduction","title":"Express App"}}}]}},"pageContext":{"id":"85b0ac14-5323-5e9c-92bd-40afbcd74775"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}