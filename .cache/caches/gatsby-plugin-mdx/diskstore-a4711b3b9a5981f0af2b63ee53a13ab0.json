{"expireTime":9007200852783996000,"key":"gatsby-plugin-mdx-entire-payload-5cb9801680efd19a4bbb4d7cc7bb9368-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"OS Module","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":13,"offset":13},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":13,"offset":13},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Node comes with multiple modules out of the box such as fs, os and much more.","position":{"start":{"line":4,"column":1,"offset":15},"end":{"line":4,"column":78,"offset":92},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":15},"end":{"line":4,"column":78,"offset":92},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const os = require(\"os\");\nconsole.log(os.platform(), os.homedir());","position":{"start":{"line":6,"column":1,"offset":94},"end":{"line":9,"column":4,"offset":179},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"File System (FS Module)","position":{"start":{"line":11,"column":4,"offset":184},"end":{"line":11,"column":27,"offset":207},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":181},"end":{"line":11,"column":27,"offset":207},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Operations including reading, writing, data streams etc. are available by default through the fs module","position":{"start":{"line":13,"column":1,"offset":209},"end":{"line":13,"column":104,"offset":312},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":209},"end":{"line":13,"column":104,"offset":312},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"const fs = require('fs')","position":{"start":{"line":15,"column":1,"offset":314},"end":{"line":15,"column":27,"offset":340},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":15,"column":27,"offset":340},"end":{"line":15,"column":28,"offset":341},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":314},"end":{"line":15,"column":28,"offset":341},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Methods with fs module","position":{"start":{"line":17,"column":5,"offset":347},"end":{"line":17,"column":27,"offset":369},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":343},"end":{"line":17,"column":27,"offset":369},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Methods from fs module are asychronous since it requires some amout of time to execute.","position":{"start":{"line":19,"column":1,"offset":371},"end":{"line":19,"column":88,"offset":458},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":371},"end":{"line":19,"column":88,"offset":458},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Reading Files","position":{"start":{"line":21,"column":1,"offset":460},"end":{"line":21,"column":14,"offset":473},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":460},"end":{"line":21,"column":14,"offset":473},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"fs.readFile(\"./docs/blog1.txt\", { encoding: \"utf-8\" }, (err, data) => {\n  if (err) {\n    console.log(err);\n  }\n  console.log(data); //Returns a buffer if encoding is not specified Else toString method has to be used to convert to readable format.\n});","position":{"start":{"line":22,"column":1,"offset":474},"end":{"line":29,"column":4,"offset":742},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Writing Files","position":{"start":{"line":31,"column":1,"offset":744},"end":{"line":31,"column":14,"offset":757},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":744},"end":{"line":31,"column":14,"offset":757},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"writeFile Method is used to write a file. If a file doesn't exist writeFile method creates one for us and writes onto it. ","position":{"start":{"line":33,"column":1,"offset":759},"end":{"line":33,"column":123,"offset":881},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Note: A file can also be created using the open method & data can be appended to the file using the append method.","position":{"start":{"line":33,"column":124,"offset":882},"end":{"line":33,"column":238,"offset":996},"indent":[]}}],"position":{"start":{"line":33,"column":123,"offset":881},"end":{"line":33,"column":239,"offset":997},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":33,"column":239,"offset":997},"end":{"line":33,"column":240,"offset":998},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":759},"end":{"line":33,"column":240,"offset":998},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"fs.writeFile(\"./docs/blog2.txt\", \"Hey Guys!\", () => {\n  console.log(\"Files Was Written\");\n});","position":{"start":{"line":35,"column":1,"offset":1000},"end":{"line":39,"column":4,"offset":1111},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Deleting Files","position":{"start":{"line":40,"column":1,"offset":1112},"end":{"line":40,"column":15,"offset":1126},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1112},"end":{"line":40,"column":15,"offset":1126},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"existsSync Method is used to check whether the file exist or not, this is recommended inorder to handle error that may occur if file doesn't exist. unLink method is used to delete the file.","position":{"start":{"line":42,"column":1,"offset":1128},"end":{"line":42,"column":190,"offset":1317},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1128},"end":{"line":42,"column":190,"offset":1317},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"if (fs.existsSync(\"./docs/docs.txt\")) {\n  fs.unlink(\"./docs/docs.txt\", (err) => {\n    if (err) {\n      console.log(err);\n    }\n    console.log(\"file deleted\");\n  });\n}","position":{"start":{"line":43,"column":1,"offset":1318},"end":{"line":52,"column":4,"offset":1503},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Creating or Removing Directories","position":{"start":{"line":54,"column":1,"offset":1505},"end":{"line":54,"column":33,"offset":1537},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1505},"end":{"line":54,"column":33,"offset":1537},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"existsSync is used to check whether the folder exists or not & mkdir method is used to create a folder while rmdir is used to remove a folder.","position":{"start":{"line":56,"column":1,"offset":1539},"end":{"line":56,"column":143,"offset":1681},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1539},"end":{"line":56,"column":143,"offset":1681},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"if (!fs.existsSync(\"./assets\")) {\n  fs.mkdir(\"./assets\", (err) => {\n    if (err) {\n      console.log(err);\n    }\n    console.log(\"folder created\");\n  });\n} else {\n  fs.rmdir(\"./assets\", (err) => {\n    if (err) {\n      console.log(err);\n    }\n    console.log(\"folder removed\");\n  });\n}","position":{"start":{"line":57,"column":1,"offset":1682},"end":{"line":73,"column":4,"offset":1984},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Streams and Buffer","position":{"start":{"line":75,"column":5,"offset":1990},"end":{"line":75,"column":23,"offset":2008},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":1986},"end":{"line":75,"column":23,"offset":2008},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Streams are used to get very large data in a progressive way so that the\nserver doesn't need to wait till the whole data is brought. So Reading as Chunks of Data. Basically it's just like streaming a video.","position":{"start":{"line":76,"column":1,"offset":2009},"end":{"line":77,"column":134,"offset":2215},"indent":[1]}}],"position":{"start":{"line":76,"column":1,"offset":2009},"end":{"line":77,"column":134,"offset":2215},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Read & Write Stream","position":{"start":{"line":79,"column":1,"offset":2217},"end":{"line":79,"column":20,"offset":2236},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":2217},"end":{"line":79,"column":20,"offset":2236},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const readStream = fs.createReadStream(\"./docs/long-data.txt\", {\n encoding: \"utf8\",\n});\n//Make Enoding to Utf-8 in readStream to avoid toString Method\n\nconst writeStream = fs.createWriteStream(\"./docs/write-stream.txt\");","position":{"start":{"line":80,"column":1,"offset":2237},"end":{"line":87,"column":4,"offset":2475},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Reading Chunk of Data and Writing to another file","position":{"start":{"line":89,"column":1,"offset":2477},"end":{"line":89,"column":50,"offset":2526},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":2477},"end":{"line":89,"column":50,"offset":2526},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"readStream.on(\"data\", (chunk) => {\nconsole.log(\"---------Chunk---------\");\nconsole.log(chunk);\n\nwriteStream.write(\"--------Chunk--------\");\nwriteStream.write(chunk);\n});","position":{"start":{"line":91,"column":1,"offset":2528},"end":{"line":99,"column":4,"offset":2715},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This Whole Process of Reading Chunks and Writing the Same to another file can be implemented using pipes, which simplifies the above code","position":{"start":{"line":101,"column":1,"offset":2717},"end":{"line":101,"column":138,"offset":2854},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":2717},"end":{"line":101,"column":138,"offset":2854},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"readStream = pipe(writeStream);","position":{"start":{"line":103,"column":1,"offset":2856},"end":{"line":105,"column":4,"offset":2905},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Inbuilt Modules\"}","position":{"start":{"line":107,"column":1,"offset":2907},"end":{"line":107,"column":56,"offset":2962},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":107,"column":56,"offset":2962}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Inbuilt Modules\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"OS Module\"), mdx(\"p\", null, \"Node comes with multiple modules out of the box such as fs, os and much more.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const os = require(\\\"os\\\");\\nconsole.log(os.platform(), os.homedir());\\n\")), mdx(\"h2\", null, \"File System (FS Module)\"), mdx(\"p\", null, \"Operations including reading, writing, data streams etc. are available by default through the fs module\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const fs = require('fs')\"), \" \"), mdx(\"h3\", null, \"Methods with fs module\"), mdx(\"p\", null, \"Methods from fs module are asychronous since it requires some amout of time to execute.\"), mdx(\"p\", null, \"Reading Files\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"fs.readFile(\\\"./docs/blog1.txt\\\", { encoding: \\\"utf-8\\\" }, (err, data) => {\\n  if (err) {\\n    console.log(err);\\n  }\\n  console.log(data); //Returns a buffer if encoding is not specified Else toString method has to be used to convert to readable format.\\n});\\n\")), mdx(\"p\", null, \"Writing Files\"), mdx(\"p\", null, \"writeFile Method is used to write a file. If a file doesn't exist writeFile method creates one for us and writes onto it. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: A file can also be created using the open method & data can be appended to the file using the append method.\"), \" \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"fs.writeFile(\\\"./docs/blog2.txt\\\", \\\"Hey Guys!\\\", () => {\\n  console.log(\\\"Files Was Written\\\");\\n});\\n\")), mdx(\"p\", null, \"Deleting Files\"), mdx(\"p\", null, \"existsSync Method is used to check whether the file exist or not, this is recommended inorder to handle error that may occur if file doesn't exist. unLink method is used to delete the file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"if (fs.existsSync(\\\"./docs/docs.txt\\\")) {\\n  fs.unlink(\\\"./docs/docs.txt\\\", (err) => {\\n    if (err) {\\n      console.log(err);\\n    }\\n    console.log(\\\"file deleted\\\");\\n  });\\n}\\n\")), mdx(\"p\", null, \"Creating or Removing Directories\"), mdx(\"p\", null, \"existsSync is used to check whether the folder exists or not & mkdir method is used to create a folder while rmdir is used to remove a folder.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"if (!fs.existsSync(\\\"./assets\\\")) {\\n  fs.mkdir(\\\"./assets\\\", (err) => {\\n    if (err) {\\n      console.log(err);\\n    }\\n    console.log(\\\"folder created\\\");\\n  });\\n} else {\\n  fs.rmdir(\\\"./assets\\\", (err) => {\\n    if (err) {\\n      console.log(err);\\n    }\\n    console.log(\\\"folder removed\\\");\\n  });\\n}\\n\")), mdx(\"h3\", null, \"Streams and Buffer\"), mdx(\"p\", null, \"Streams are used to get very large data in a progressive way so that the\\nserver doesn't need to wait till the whole data is brought. So Reading as Chunks of Data. Basically it's just like streaming a video.\"), mdx(\"p\", null, \"Read & Write Stream\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const readStream = fs.createReadStream(\\\"./docs/long-data.txt\\\", {\\n encoding: \\\"utf8\\\",\\n});\\n//Make Enoding to Utf-8 in readStream to avoid toString Method\\n\\nconst writeStream = fs.createWriteStream(\\\"./docs/write-stream.txt\\\");\\n\")), mdx(\"p\", null, \"Reading Chunk of Data and Writing to another file\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"readStream.on(\\\"data\\\", (chunk) => {\\nconsole.log(\\\"---------Chunk---------\\\");\\nconsole.log(chunk);\\n\\nwriteStream.write(\\\"--------Chunk--------\\\");\\nwriteStream.write(chunk);\\n});\\n\")), mdx(\"p\", null, \"This Whole Process of Reading Chunks and Writing the Same to another file can be implemented using pipes, which simplifies the above code\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"readStream = pipe(writeStream);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Inbuilt Modules\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`OS Module`}</h2>\n    <p>{`Node comes with multiple modules out of the box such as fs, os and much more.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const os = require(\"os\");\nconsole.log(os.platform(), os.homedir());\n`}</code></pre>\n    <h2>{`File System (FS Module)`}</h2>\n    <p>{`Operations including reading, writing, data streams etc. are available by default through the fs module`}</p>\n    <p><inlineCode parentName=\"p\">{`const fs = require('fs')`}</inlineCode>{` `}</p>\n    <h3>{`Methods with fs module`}</h3>\n    <p>{`Methods from fs module are asychronous since it requires some amout of time to execute.`}</p>\n    <p>{`Reading Files`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`fs.readFile(\"./docs/blog1.txt\", { encoding: \"utf-8\" }, (err, data) => {\n  if (err) {\n    console.log(err);\n  }\n  console.log(data); //Returns a buffer if encoding is not specified Else toString method has to be used to convert to readable format.\n});\n`}</code></pre>\n    <p>{`Writing Files`}</p>\n    <p>{`writeFile Method is used to write a file. If a file doesn't exist writeFile method creates one for us and writes onto it. `}<em parentName=\"p\">{`Note: A file can also be created using the open method & data can be appended to the file using the append method.`}</em>{` `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`fs.writeFile(\"./docs/blog2.txt\", \"Hey Guys!\", () => {\n  console.log(\"Files Was Written\");\n});\n`}</code></pre>\n    <p>{`Deleting Files`}</p>\n    <p>{`existsSync Method is used to check whether the file exist or not, this is recommended inorder to handle error that may occur if file doesn't exist. unLink method is used to delete the file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`if (fs.existsSync(\"./docs/docs.txt\")) {\n  fs.unlink(\"./docs/docs.txt\", (err) => {\n    if (err) {\n      console.log(err);\n    }\n    console.log(\"file deleted\");\n  });\n}\n`}</code></pre>\n    <p>{`Creating or Removing Directories`}</p>\n    <p>{`existsSync is used to check whether the folder exists or not & mkdir method is used to create a folder while rmdir is used to remove a folder.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`if (!fs.existsSync(\"./assets\")) {\n  fs.mkdir(\"./assets\", (err) => {\n    if (err) {\n      console.log(err);\n    }\n    console.log(\"folder created\");\n  });\n} else {\n  fs.rmdir(\"./assets\", (err) => {\n    if (err) {\n      console.log(err);\n    }\n    console.log(\"folder removed\");\n  });\n}\n`}</code></pre>\n    <h3>{`Streams and Buffer`}</h3>\n    <p>{`Streams are used to get very large data in a progressive way so that the\nserver doesn't need to wait till the whole data is brought. So Reading as Chunks of Data. Basically it's just like streaming a video.`}</p>\n    <p>{`Read & Write Stream`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const readStream = fs.createReadStream(\"./docs/long-data.txt\", {\n encoding: \"utf8\",\n});\n//Make Enoding to Utf-8 in readStream to avoid toString Method\n\nconst writeStream = fs.createWriteStream(\"./docs/write-stream.txt\");\n`}</code></pre>\n    <p>{`Reading Chunk of Data and Writing to another file`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`readStream.on(\"data\", (chunk) => {\nconsole.log(\"---------Chunk---------\");\nconsole.log(chunk);\n\nwriteStream.write(\"--------Chunk--------\");\nwriteStream.write(chunk);\n});\n`}</code></pre>\n    <p>{`This Whole Process of Reading Chunks and Writing the Same to another file can be implemented using pipes, which simplifies the above code`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`readStream = pipe(writeStream);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}