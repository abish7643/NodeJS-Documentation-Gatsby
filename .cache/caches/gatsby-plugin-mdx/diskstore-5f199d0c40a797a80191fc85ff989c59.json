{"expireTime":9007200853033906000,"key":"gatsby-plugin-mdx-entire-payload-004ae0b643a99b58d21eb2d523ab8fe2-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Using HTTP Module","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":21,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":21,"offset":21},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To import http,","position":{"start":{"line":4,"column":1,"offset":23},"end":{"line":4,"column":16,"offset":38},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":23},"end":{"line":4,"column":16,"offset":38},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"const http = require(\"http\");","position":{"start":{"line":6,"column":1,"offset":40},"end":{"line":6,"column":32,"offset":71},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":40},"end":{"line":6,"column":32,"offset":71},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Creating and Listening To Server","position":{"start":{"line":8,"column":5,"offset":77},"end":{"line":8,"column":37,"offset":109},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":73},"end":{"line":8,"column":37,"offset":109},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To create an http server, use the createServer method,","position":{"start":{"line":10,"column":1,"offset":114},"end":{"line":10,"column":55,"offset":168},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":114},"end":{"line":10,"column":55,"offset":168},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const server = http.createServer((req, res) => {\n  console.log(req.headers.host); // localhost:3000\n  console.log(req.url, req.method); // Example of Method is POST, GET etc\n\n  // Listen to localhost:3000 to interact with the server,\n  server.listen(3000, \"localhost\", () => {\n    console.log(\"listening for requests on port 3000\");\n  });\n}","position":{"start":{"line":11,"column":1,"offset":169},"end":{"line":21,"column":4,"offset":527},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Handling Simple Routing and HTML Response Views","position":{"start":{"line":23,"column":5,"offset":533},"end":{"line":23,"column":52,"offset":580},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":529},"end":{"line":23,"column":52,"offset":580},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To respond to a request from the client, a html can be sent as a response. Therefore the already created server gets a request, get the path, send back the required html file accordingly.","position":{"start":{"line":25,"column":1,"offset":582},"end":{"line":25,"column":188,"offset":769},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":582},"end":{"line":25,"column":188,"offset":769},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create index.html, about.html, 404.html in a new directory, usually the directory is given the name views. ","position":{"start":{"line":27,"column":1,"offset":771},"end":{"line":27,"column":108,"offset":878},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":771},"end":{"line":27,"column":108,"offset":878},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"For example if the client requires the home page, the path to index.html, ie './views/index.html' can be passed as response.","position":{"start":{"line":28,"column":3,"offset":881},"end":{"line":28,"column":127,"offset":1005},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":881},"end":{"line":28,"column":127,"offset":1005},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":879},"end":{"line":28,"column":127,"offset":1005},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Also a status code has to be given accordingly so that the client knows exactly what happended in a nutshell. For example status code 404 means the server has no fucking response to show you for the request you made.","position":{"start":{"line":30,"column":1,"offset":1007},"end":{"line":30,"column":217,"offset":1223},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1007},"end":{"line":30,"column":217,"offset":1223},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const server = http.createServer((req, res) => {\n  console.log(req.headers.host); // localhost:3000\n  console.log(req.url, req.method); // Example of Method is POST, GET etc\n\n  let path = \"./views/\"; // views folder path\n  switch (req.url) {\n    case \"/\":\n      path += \"index.html\";\n      res.statusCode = 200;\n      break;\n    case \"/about\":\n      path += \"about.html\";\n      res.statusCode = 200;\n      break;\n    // Redirect\n    case \"/about-me\":\n      res.statusCode = 301;\n      res.setHeader(\"Location\", \"/about\"); // Redirecting\n      res.end(); // Ending the response\n      break;\n    default:\n      path += \"404.html\";\n      res.statusCode = 404;\n      break;\n  }\n  console.log(path);  \n\n  // Listen to localhost:3000 to interact with the server,\n  server.listen(3000, \"localhost\", () => {\n    console.log(\"listening for requests on port 3000\");\n  });\n}","position":{"start":{"line":32,"column":1,"offset":1225},"end":{"line":65,"column":4,"offset":2106},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Create Server Using HTTP\"}","position":{"start":{"line":67,"column":1,"offset":2108},"end":{"line":67,"column":65,"offset":2172},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":67,"column":65,"offset":2172}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Create Server Using HTTP\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Using HTTP Module\"), mdx(\"p\", null, \"To import http,\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const http = require(\\\"http\\\");\")), mdx(\"h3\", null, \"Creating and Listening To Server\"), mdx(\"p\", null, \"To create an http server, use the createServer method,\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const server = http.createServer((req, res) => {\\n  console.log(req.headers.host); // localhost:3000\\n  console.log(req.url, req.method); // Example of Method is POST, GET etc\\n\\n  // Listen to localhost:3000 to interact with the server,\\n  server.listen(3000, \\\"localhost\\\", () => {\\n    console.log(\\\"listening for requests on port 3000\\\");\\n  });\\n}\\n\")), mdx(\"h3\", null, \"Handling Simple Routing and HTML Response Views\"), mdx(\"p\", null, \"To respond to a request from the client, a html can be sent as a response. Therefore the already created server gets a request, get the path, send back the required html file accordingly.\"), mdx(\"p\", null, \"Create index.html, about.html, 404.html in a new directory, usually the directory is given the name views. \"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"For example if the client requires the home page, the path to index.html, ie './views/index.html' can be passed as response.\")), mdx(\"p\", null, \"Also a status code has to be given accordingly so that the client knows exactly what happended in a nutshell. For example status code 404 means the server has no fucking response to show you for the request you made.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const server = http.createServer((req, res) => {\\n  console.log(req.headers.host); // localhost:3000\\n  console.log(req.url, req.method); // Example of Method is POST, GET etc\\n\\n  let path = \\\"./views/\\\"; // views folder path\\n  switch (req.url) {\\n    case \\\"/\\\":\\n      path += \\\"index.html\\\";\\n      res.statusCode = 200;\\n      break;\\n    case \\\"/about\\\":\\n      path += \\\"about.html\\\";\\n      res.statusCode = 200;\\n      break;\\n    // Redirect\\n    case \\\"/about-me\\\":\\n      res.statusCode = 301;\\n      res.setHeader(\\\"Location\\\", \\\"/about\\\"); // Redirecting\\n      res.end(); // Ending the response\\n      break;\\n    default:\\n      path += \\\"404.html\\\";\\n      res.statusCode = 404;\\n      break;\\n  }\\n  console.log(path);  \\n\\n  // Listen to localhost:3000 to interact with the server,\\n  server.listen(3000, \\\"localhost\\\", () => {\\n    console.log(\\\"listening for requests on port 3000\\\");\\n  });\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Create Server Using HTTP\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Using HTTP Module`}</h2>\n    <p>{`To import http,`}</p>\n    <p><inlineCode parentName=\"p\">{`const http = require(\"http\");`}</inlineCode></p>\n    <h3>{`Creating and Listening To Server`}</h3>\n    <p>{`To create an http server, use the createServer method,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const server = http.createServer((req, res) => {\n  console.log(req.headers.host); // localhost:3000\n  console.log(req.url, req.method); // Example of Method is POST, GET etc\n\n  // Listen to localhost:3000 to interact with the server,\n  server.listen(3000, \"localhost\", () => {\n    console.log(\"listening for requests on port 3000\");\n  });\n}\n`}</code></pre>\n    <h3>{`Handling Simple Routing and HTML Response Views`}</h3>\n    <p>{`To respond to a request from the client, a html can be sent as a response. Therefore the already created server gets a request, get the path, send back the required html file accordingly.`}</p>\n    <p>{`Create index.html, about.html, 404.html in a new directory, usually the directory is given the name views. `}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`For example if the client requires the home page, the path to index.html, ie './views/index.html' can be passed as response.`}</p>\n    </blockquote>\n    <p>{`Also a status code has to be given accordingly so that the client knows exactly what happended in a nutshell. For example status code 404 means the server has no fucking response to show you for the request you made.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const server = http.createServer((req, res) => {\n  console.log(req.headers.host); // localhost:3000\n  console.log(req.url, req.method); // Example of Method is POST, GET etc\n\n  let path = \"./views/\"; // views folder path\n  switch (req.url) {\n    case \"/\":\n      path += \"index.html\";\n      res.statusCode = 200;\n      break;\n    case \"/about\":\n      path += \"about.html\";\n      res.statusCode = 200;\n      break;\n    // Redirect\n    case \"/about-me\":\n      res.statusCode = 301;\n      res.setHeader(\"Location\", \"/about\"); // Redirecting\n      res.end(); // Ending the response\n      break;\n    default:\n      path += \"404.html\";\n      res.statusCode = 404;\n      break;\n  }\n  console.log(path);  \n\n  // Listen to localhost:3000 to interact with the server,\n  server.listen(3000, \"localhost\", () => {\n    console.log(\"listening for requests on port 3000\");\n  });\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}