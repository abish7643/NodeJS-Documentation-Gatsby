{"expireTime":9007200852781458000,"key":"gatsby-plugin-mdx-entire-payload-92aed54aaca67cc86c172bbc17cbb16a-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Node JS","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":10,"offset":10},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":10,"offset":10},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Javascript was literally confined to run on a browser. Node JS made it possible to run Javascript outside a browser using Node JS. Node JS runs on the V8 Engine (Google/Chrome), So literally it's architecture has similarities compared to Javascipt on a browser. Other alternatives to Node JS are Python, Php, Ruby etc (Server Side languages).","position":{"start":{"line":4,"column":1,"offset":12},"end":{"line":4,"column":343,"offset":354},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":12},"end":{"line":4,"column":343,"offset":354},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Literally we can use the same language on a server rather thanjust a browser/client","position":{"start":{"line":6,"column":3,"offset":358},"end":{"line":6,"column":86,"offset":441},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":358},"end":{"line":6,"column":86,"offset":441},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":356},"end":{"line":6,"column":86,"offset":441},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Computer and Code","position":{"start":{"line":8,"column":4,"offset":446},"end":{"line":8,"column":21,"offset":463},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":443},"end":{"line":8,"column":21,"offset":463},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Node JS","position":{"start":{"line":10,"column":4,"offset":468},"end":{"line":10,"column":11,"offset":475},"indent":[]}}],"position":{"start":{"line":10,"column":4,"offset":468},"end":{"line":10,"column":11,"offset":475},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":465},"end":{"line":10,"column":11,"offset":475},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"C++","position":{"start":{"line":11,"column":4,"offset":479},"end":{"line":11,"column":7,"offset":482},"indent":[]}}],"position":{"start":{"line":11,"column":4,"offset":479},"end":{"line":11,"column":7,"offset":482},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":476},"end":{"line":11,"column":7,"offset":482},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Machine Code","position":{"start":{"line":12,"column":4,"offset":486},"end":{"line":12,"column":16,"offset":498},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":486},"end":{"line":12,"column":16,"offset":498},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":483},"end":{"line":12,"column":16,"offset":498},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Hardware","position":{"start":{"line":13,"column":4,"offset":502},"end":{"line":13,"column":12,"offset":510},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":502},"end":{"line":13,"column":12,"offset":510},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":499},"end":{"line":13,"column":12,"offset":510},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":465},"end":{"line":13,"column":12,"offset":510},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"V8 engine compiles Javascript into Machine Code. Node.js is written in C++.","position":{"start":{"line":15,"column":1,"offset":512},"end":{"line":15,"column":76,"offset":587},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":512},"end":{"line":15,"column":76,"offset":587},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Javascipt -> Node JS (Written in C++) -> Machine Code","position":{"start":{"line":17,"column":3,"offset":591},"end":{"line":17,"column":56,"offset":644},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":591},"end":{"line":17,"column":56,"offset":644},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":589},"end":{"line":17,"column":56,"offset":644},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Streams and Buffer","position":{"start":{"line":27,"column":5,"offset":658},"end":{"line":27,"column":23,"offset":676},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":654},"end":{"line":27,"column":23,"offset":676},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Streams are used to get very large data in a progressive way so that the\nserver doesn't need to wait till the whole data is brought. So Reading as Chunks of Data. Basically it's just like streaming a video.","position":{"start":{"line":28,"column":1,"offset":677},"end":{"line":29,"column":134,"offset":883},"indent":[1]}}],"position":{"start":{"line":28,"column":1,"offset":677},"end":{"line":29,"column":134,"offset":883},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Read & Write Stream","position":{"start":{"line":31,"column":1,"offset":885},"end":{"line":31,"column":20,"offset":904},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":885},"end":{"line":31,"column":20,"offset":904},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const readStream = fs.createReadStream(\"./docs/long-data.txt\", {\n encoding: \"utf8\",\n});\n//Make Enoding to Utf-8 in readStream to avoid toString Method\n\nconst writeStream = fs.createWriteStream(\"./docs/write-stream.txt\");","position":{"start":{"line":32,"column":1,"offset":905},"end":{"line":39,"column":4,"offset":1143},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Reading Chunk of Data and Writing to another file","position":{"start":{"line":41,"column":1,"offset":1145},"end":{"line":41,"column":50,"offset":1194},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1145},"end":{"line":41,"column":50,"offset":1194},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"readStream.on(\"data\", (chunk) => {\nconsole.log(\"---------Chunk---------\");\nconsole.log(chunk);\n\nwriteStream.write(\"--------Chunk--------\");\nwriteStream.write(chunk);\n});","position":{"start":{"line":43,"column":1,"offset":1196},"end":{"line":51,"column":4,"offset":1383},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This Whole Process of Reading Chunks and Writing the Same to another file can be implemented using pipes, which simplifies the above code","position":{"start":{"line":53,"column":1,"offset":1385},"end":{"line":53,"column":138,"offset":1522},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1385},"end":{"line":53,"column":138,"offset":1522},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"readStream = pipe(writeStream);","position":{"start":{"line":55,"column":1,"offset":1524},"end":{"line":57,"column":4,"offset":1573},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Node JS\"}","position":{"start":{"line":59,"column":1,"offset":1575},"end":{"line":59,"column":48,"offset":1622},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":59,"column":48,"offset":1622}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Node JS\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Node JS\"), mdx(\"p\", null, \"Javascript was literally confined to run on a browser. Node JS made it possible to run Javascript outside a browser using Node JS. Node JS runs on the V8 Engine (Google/Chrome), So literally it's architecture has similarities compared to Javascipt on a browser. Other alternatives to Node JS are Python, Php, Ruby etc (Server Side languages).\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Literally we can use the same language on a server rather thanjust a browser/client\")), mdx(\"h2\", null, \"Computer and Code\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Node JS\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"C++\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Machine Code\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Hardware\")), mdx(\"p\", null, \"V8 engine compiles Javascript into Machine Code. Node.js is written in C++.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Javascipt -> Node JS (Written in C++) -> Machine Code\")), mdx(\"h3\", null, \"Streams and Buffer\"), mdx(\"p\", null, \"Streams are used to get very large data in a progressive way so that the\\nserver doesn't need to wait till the whole data is brought. So Reading as Chunks of Data. Basically it's just like streaming a video.\"), mdx(\"p\", null, \"Read & Write Stream\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const readStream = fs.createReadStream(\\\"./docs/long-data.txt\\\", {\\n encoding: \\\"utf8\\\",\\n});\\n//Make Enoding to Utf-8 in readStream to avoid toString Method\\n\\nconst writeStream = fs.createWriteStream(\\\"./docs/write-stream.txt\\\");\\n\")), mdx(\"p\", null, \"Reading Chunk of Data and Writing to another file\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"readStream.on(\\\"data\\\", (chunk) => {\\nconsole.log(\\\"---------Chunk---------\\\");\\nconsole.log(chunk);\\n\\nwriteStream.write(\\\"--------Chunk--------\\\");\\nwriteStream.write(chunk);\\n});\\n\")), mdx(\"p\", null, \"This Whole Process of Reading Chunks and Writing the Same to another file can be implemented using pipes, which simplifies the above code\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"readStream = pipe(writeStream);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Node JS\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Node JS`}</h1>\n    <p>{`Javascript was literally confined to run on a browser. Node JS made it possible to run Javascript outside a browser using Node JS. Node JS runs on the V8 Engine (Google/Chrome), So literally it's architecture has similarities compared to Javascipt on a browser. Other alternatives to Node JS are Python, Php, Ruby etc (Server Side languages).`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Literally we can use the same language on a server rather thanjust a browser/client`}</p>\n    </blockquote>\n    <h2>{`Computer and Code`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Node JS`}</li>\n      <li parentName=\"ol\">{`C++`}</li>\n      <li parentName=\"ol\">{`Machine Code`}</li>\n      <li parentName=\"ol\">{`Hardware`}</li>\n    </ol>\n    <p>{`V8 engine compiles Javascript into Machine Code. Node.js is written in C++.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Javascipt -> Node JS (Written in C++) -> Machine Code`}</p>\n    </blockquote>\n    <h3>{`Streams and Buffer`}</h3>\n    <p>{`Streams are used to get very large data in a progressive way so that the\nserver doesn't need to wait till the whole data is brought. So Reading as Chunks of Data. Basically it's just like streaming a video.`}</p>\n    <p>{`Read & Write Stream`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const readStream = fs.createReadStream(\"./docs/long-data.txt\", {\n encoding: \"utf8\",\n});\n//Make Enoding to Utf-8 in readStream to avoid toString Method\n\nconst writeStream = fs.createWriteStream(\"./docs/write-stream.txt\");\n`}</code></pre>\n    <p>{`Reading Chunk of Data and Writing to another file`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`readStream.on(\"data\", (chunk) => {\nconsole.log(\"---------Chunk---------\");\nconsole.log(chunk);\n\nwriteStream.write(\"--------Chunk--------\");\nwriteStream.write(chunk);\n});\n`}</code></pre>\n    <p>{`This Whole Process of Reading Chunks and Writing the Same to another file can be implemented using pipes, which simplifies the above code`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`readStream = pipe(writeStream);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}