{"data":{"site":{"siteMetadata":{"title":"Gatsby Gitbook Boilerplate","docsLocation":"https://github.com/abish7643/Project-Documentation-Gatsby/tree/master/content"}},"mdx":{"fields":{"id":"8d4786f7-52a7-507d-bdb4-f1ad118943c1","title":"Create Server Using HTTP","slug":"/nodejs/http server"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Create Server Using HTTP\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Using HTTP Module\"), mdx(\"p\", null, \"To import http,\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const http = require(\\\"http\\\");\\n\")), mdx(\"h3\", null, \"Creating and Listening To Server\"), mdx(\"p\", null, \"To create an http server, use the createServer method,\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const server = http.createServer((req, res) => {\\n  console.log(req.headers.host); // localhost:3000\\n  console.log(req.url, req.method); // Example of Method is POST, GET etc\\n\\n  // Listen to localhost:3000 to interact with the server,\\n  server.listen(3000, \\\"localhost\\\", () => {\\n    console.log(\\\"listening for requests on port 3000\\\");\\n  });\\n}\\n\")), mdx(\"h3\", null, \"Handling Simple Routing and HTML Response Views\"), mdx(\"p\", null, \"To respond to a request from the client, a html can be sent as a response. Therefore the already created server gets a request, get the path, send back the required html file accordingly.\"), mdx(\"p\", null, \"Create index.html, about.html, 404.html in a new directory, usually the directory is given the name views. \"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"For example if the client requires the home page, the path to index.html, ie './views/index.html' can be passed as response.\")), mdx(\"p\", null, \"Also a status code has to be given accordingly so that the client knows exactly what happended in a nutshell. For example status code 404 means the server has no fucking response to show you for the request you made.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const server = http.createServer((req, res) => {\\n  console.log(req.headers.host); // localhost:3000\\n  console.log(req.url, req.method); // Example of Method is POST, GET etc\\n\\n  let path = \\\"./views/\\\"; // views folder path\\n  switch (req.url) {\\n    case \\\"/\\\":\\n      path += \\\"index.html\\\";\\n      res.statusCode = 200;\\n      break;\\n    case \\\"/about\\\":\\n      path += \\\"about.html\\\";\\n      res.statusCode = 200;\\n      break;\\n    // Redirect\\n    case \\\"/about-me\\\":\\n      res.statusCode = 301;\\n      res.setHeader(\\\"Location\\\", \\\"/about\\\"); // Redirecting\\n      res.end(); // Ending the response\\n      break;\\n    default:\\n      path += \\\"404.html\\\";\\n      res.statusCode = 404;\\n      break;\\n  }\\n  console.log(path);  \\n\\n  // Listen to localhost:3000 to interact with the server,\\n  server.listen(3000, \\\"localhost\\\", () => {\\n    console.log(\\\"listening for requests on port 3000\\\");\\n  });\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#using-http-module","title":"Using HTTP Module","items":[{"url":"#creating-and-listening-to-server","title":"Creating and Listening To Server"},{"url":"#handling-simple-routing-and-html-response-views","title":"Handling Simple Routing and HTML Response Views"}]}]},"parent":{"__typename":"File","relativePath":"nodejs/http server.md"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/nodejs/streams","title":"Streams and Buffer"}}},{"node":{"fields":{"slug":"/nodejs/modules","title":"Inbuilt Modules"}}},{"node":{"fields":{"slug":"/nodejs/http server","title":"Create Server Using HTTP"}}},{"node":{"fields":{"slug":"/express","title":"Express JS"}}},{"node":{"fields":{"slug":"/nodejs/importingtojs","title":"Importing From Other JS Files"}}},{"node":{"fields":{"slug":"/nodejs/global object","title":"Global Object"}}},{"node":{"fields":{"slug":"/","title":"Introduction"}}},{"node":{"fields":{"slug":"/express/2-ejs-express","title":"Using EJS"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/express/3-otherroutes","title":"Routes"}}},{"node":{"fields":{"slug":"/nodejs","title":"Node JS"}}},{"node":{"fields":{"slug":"/express/1-introduction","title":"Express App"}}}]}},"pageContext":{"id":"8d4786f7-52a7-507d-bdb4-f1ad118943c1"}}